{"version":3,"file":"bundle.noise.js","sources":["../../src/util.js","../../src/p5js/util.js","../../src/fns.js","../../src/p5js/templates.js","../../src/maths.js","../../src/colours.js","../../sketches/noise.js"],"sourcesContent":["function* enumerate(it) {\n    let i = 0\n    for (const x of it)\n        yield [i++, x]\n}\n\nfunction* range(max) {\n    let i = -1\n    while (++i < max)\n        yield i\n}\n\nfunction collect(iter) {\n    const arr = []\n    for (const element of iter)\n        arr.push(element)\n    return arr\n}\n\nexport { enumerate, range, collect }","import { enumerate, range } from \"../util\";\n\nfunction* pixelgrid(p5) {\n    const d = p5.pixelDensity()\n    const [w, h] = [p5.width * d, p5.height * d]\n    for (const [ix, x] of enumerate(range(w))) {\n        for (const [iy, y] of enumerate(range(h))) {\n            const idx = ix + iy * w;\n            yield [idx, x / d, y / d]\n        }\n    }\n}\n\nfunction setPixel(p5, idx, col) {\n    // default alpha = 255\n    p5.pixels[idx * 4 + 3] = 255\n\n    // handle grayscale\n    if (!(col instanceof Array))\n        col = [col, col, col]\n\n    // do the setting\n    col.forEach((c, i) => p5.pixels[4 * idx + i] = c)\n}\n\nexport { pixelgrid, setPixel }","function donothing() { }\nfunction identity(x) { x }\n\nfunction dontimes(n, thing) {\n    let i = n; while (i--) thing()\n}\nfunction nthings(n, thing) {\n    return new Array(n).fill(0).map(_ => thing())\n}\n\nconst pipe = (...fns) => (x) => fns.reduce((v, f) => f(v), x);\n\nexport { donothing, dontimes, nthings, pipe }","import { pixelgrid, setPixel } from \"./util\";\nimport { donothing } from \"../fns\";\n\nconst pausablesketch = (setup, draw) => {\n    return new p5((p5) => {\n        let paused = false;\n\n        p5.setup = function () { setup(p5) }\n\n        p5.draw = function () {\n            if (paused)\n                p5.frameCount--\n            else\n                draw(p5)\n        }\n\n        p5.keyPressed = function () {\n            if (p5.key == \" \")\n                paused = !paused\n            if (p5.key == \"s\")\n                p5.saveCanvas(\"sketch.png\")\n        }\n    })\n}\n\nconst staticgrid = (generatef, setup = donothing) => {\n    return new p5((p5) => {\n        const f = generatef(p5)\n\n        let seed = 0;\n        let paused = false;\n\n        p5.setup = function () {\n            seed++\n            paused = false;\n            console.log(`Seed: ${seed}`)\n            p5.noiseSeed(seed); p5.randomSeed(seed);\n            p5.createCanvas(p5.windowWidth, p5.windowHeight);\n            p5.pixelDensity(1)\n            setup(p5)\n        }\n\n        p5.draw = function () {\n            if (paused) return\n\n            p5.loadPixels()\n            const tick = performance.now()\n            for (const [idx, x, y] of pixelgrid(p5)) {\n                const val = f({ x, y })\n                setPixel(p5, idx, val)\n            }\n            const tock = performance.now()\n            p5.updatePixels()\n\n            const duration = tock - tick\n            const calculations = p5.width * p5.height * p5.pixelDensity() ** 2\n            console.log(\"Pixels per ms:\", (calculations / duration).toFixed(0));\n            paused = true\n        }\n\n        p5.keyPressed = function () {\n            if (p5.key == \"s\")\n                p5.saveCanvas(\"sketch.png\")\n            if (p5.key == \" \")\n                p5.setup()\n        }\n    })\n\n}\n\nexport { pausablesketch, staticgrid }","import { dontimes, nthings } from \"./fns\";\n\nfunction random(x, y) {\n    const r = Math.random();\n\n    if (x === undefined)\n        return r\n    if (y === undefined)\n        [y, x] = [x, 0]\n\n    return r * (y - x) + x\n}\n\nfunction randint(x, y) {\n    return Math.floor(random(x, y))\n}\n\nfunction randchoice(arr) {\n    const idx = randint(arr.length)\n    return arr[idx]\n}\n\nfunction ssin(x) {\n    return 0.5 * (1 + Math.sin(x))\n}\n\nfunction smoothstep(x) {\n    return 3 * x ** 2 - 2 * x ** 3\n}\n\nfunction parts(num) {\n    const int = Math.floor(num)\n    return [int, num - int]\n}\n\nfunction abs(num) {\n    return num > 0 ? num : -num\n}\n\nfunction repeatablyrandom(initseed) {\n    // Linear Congruential Generator\n    // see https://en.wikipedia.org/wiki/Linear_congruential_generator\n    let z;\n    const [m, a, c] = [4294967296, 1664525, 1013904223];\n    const gen = {\n        seed(s) { z = s >>> 0 },\n        rand() {\n            z = (a * z + c) % m;\n            return z / m;\n        }\n    }\n\n    if (initseed == undefined)\n        initseed = Math.random() * m\n\n    gen.seed(initseed)\n    // first few numbers are similar for similar seeds\n    dontimes(10, gen.rand)\n\n    return gen\n}\n\nconst scaledcosine = i => 0.5 * (1.0 - Math.cos(i * Math.PI));\n\n// TOOD can this be sped up?\n// TODO 4+ dimensional?\nfunction perlinnoise(seed) {\n    // adapted from p5.js: \n    // see https://github.com/processing/p5.js/blob/374acfb44588bfd565c54d61264df197d798d121/src/math/noise.js\n\n    const gen = repeatablyrandom(seed)\n\n    const size = 1 << 12 - 1\n    let perlin = nthings(size + 1, gen.rand)\n\n    const PERLIN_YWRAPB = 4;\n    const PERLIN_YWRAP = 1 << PERLIN_YWRAPB;\n    const PERLIN_ZWRAPB = 8;\n    const PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB;\n    const PERLIN_SIZE = 4095;\n\n    let octaves = 4; // default to medium smooth\n    let falloff = 0.5; // 50% reduction/octave\n\n    const noise = function (x, y = 0, z = 0) {\n        let totala = 0\n        if (x < 0) x = -x;\n        if (y < 0) y = -y;\n        if (z < 0) z = -z;\n\n        let xi = Math.floor(x);\n        let yi = Math.floor(y);\n        let zi = Math.floor(z);\n        let xf = x - xi;\n        let yf = y - yi;\n        let zf = z - zi;\n        let rxf, ryf;\n\n        let r = 0;\n        let ampl = 0.5;\n\n        let n1, n2, n3;\n\n        for (let o = 0; o < octaves; o++) {\n            let of = xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB);\n\n            rxf = scaledcosine(xf);\n            ryf = scaledcosine(yf);\n\n            n1 = perlin[of & PERLIN_SIZE];\n            n1 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n1);\n            n2 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];\n            n2 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n2);\n            n1 += ryf * (n2 - n1);\n\n            of += PERLIN_ZWRAP;\n            n2 = perlin[of & PERLIN_SIZE];\n            n2 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n2);\n            n3 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];\n            n3 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n3);\n            n2 += ryf * (n3 - n2);\n\n            n1 += scaledcosine(zf) * (n2 - n1);\n\n            r += n1 * ampl;\n            totala += ampl\n            ampl *= falloff;\n            xi <<= 1;\n            xf *= 2;\n            yi <<= 1;\n            yf *= 2;\n            zi <<= 1;\n            zf *= 2;\n\n            if (xf >= 1.0) {\n                xi++;\n                xf--;\n            }\n            if (yf >= 1.0) {\n                yi++;\n                yf--;\n            }\n            if (zf >= 1.0) {\n                zi++;\n                zf--;\n            }\n        }\n        return r / totala;\n    }\n\n    return {\n        noise,\n        seed(val) {\n            gen.seed(val)\n            perlin = nthings(size, gen.rand)\n        },\n        detail(o = 4, f = 0.5) {\n            octaves = o;\n            falloff = f\n        }\n    }\n}\n\n\n\nexport { random, randint, randchoice, repeatablyrandom, perlinnoise, ssin, smoothstep }","import { randchoice } from \"./maths\"\n\nconst _pallettes = {\n    sea: \"#E7E0C9 #C1CFC0 #6B7AA1 #11324D\",\n    grass: \"#C3BA85 #DAD5AB #F0F0CB #FEFFE2\",\n    sunset: \"#93B5C6 #C9CCD5 #E4D8DC #FFE3E3\",\n    coffee: \"#F5E8C7 #DEBA9D #9E7777 #6F4C5B\",\n    lavender: \"#CCF0C3 #BCA3CA #7C4789 #4A0E5C\",\n    sailor: \"#FA163F #12CAD6 #0FABBC #E4F9FF\",\n    phouse: \"#F1F1F1 #FDB827 #21209C #23120B\",\n    white: \"#FFFFFF\",\n    default: \"#000000 #888888 #FFFFFF\",\n}\n\nconst torgb = (hex) => {\n    return [0, 1, 2].map(i => parseInt(hex.slice(i * 2 + 1, i * 2 + 3), 16))\n}\n\nconst pallettes = {}\nfor (const [name, colors] of Object.entries(_pallettes))\n    pallettes[name] = colors.split(\" \").map(torgb)\n\nconst randpallette = () => pallettes[randchoice(Object.keys(pallettes))]\n\nexport { pallettes, randpallette }","import { staticgrid } from \"../src/p5js/templates\";\nimport { pallettes, randpallette } from \"../src/colours\";\nimport { smoothstep, ssin } from \"../src/maths\";\nimport { pipe } from \"../src/fns\";\n\nconst detail = 4\nconst falloff = 0.6\nconst scale = 0.005\nconst rapidity = 40\n\n\nconst colours = pallettes.sailor\n// const colours = randpallette()\nfunction color(val) {\n    return colours[Math.floor(val * colours.length)]\n    // return val * 255\n}\n\nfunction setup(p5) { p5.noiseDetail(detail, falloff) }\n\nfunction generatef(p5) {\n    return pipe(\n        ({ x, y }) => p5.noise(scale * x, scale * y),\n        (n) => ssin(n * rapidity),\n        // smoothstep,\n        color\n    )\n}\n\n\nstaticgrid(generatef, setup)\n"],"names":[],"mappings":"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"}